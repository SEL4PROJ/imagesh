#!/usr/bin/env python3

import os
import sys
import getpass
import shutil
import subprocess
from configparser import ConfigParser, ExtendedInterpolation

USER = getpass.getuser()
UID = os.getuid()
GID = os.getgid()

# Do we need a default if you always make a USER one?
DEFAULT_CONFIG_DIR = "/etc/imagesh"
DEFAULT_CONFIG_FILE = "{}/config.ini".format(DEFAULT_CONFIG_DIR)
DEFAULT_EXTRAS_FILE = "{}/extras.dockerfile".format(DEFAULT_CONFIG_DIR)
USER_HOME_DIR = "/home/{}".format(USER)
USER_CONFIG_DIR = "{}/.config/imagesh".format(USER_HOME_DIR)
USER_CONFIG_FILE = "{}/config.ini".format(USER_CONFIG_DIR)



def generate_user_config():
    """
    Write a local config file
    """
    try:
        # Make the dirs as needed
        os.makedirs(USER_CONFIG_DIR)
    except os.error:
        pass

    shutil.copy2(DEFAULT_CONFIG_FILE, USER_CONFIG_DIR)
    shutil.copy2(DEFAULT_EXTRAS_FILE, USER_CONFIG_DIR)


os.environ['TERM'] = 'xterm' # removes warning on non-tty commands

cfg = ConfigParser(interpolation=ExtendedInterpolation())
cfg.read(DEFAULT_CONFIG_FILE)

if not os.path.isdir(USER_CONFIG_DIR):
    # If the user does not have a local config dir, make one
    generate_user_config()

cfg.read(USER_CONFIG_FILE)

"""
===============================
Process ini files
"""
image = cfg['IMAGE']['image']

always_refresh = cfg["IMAGE"].getboolean("always refresh image at login")
refresh_this_time = cfg["IMAGE"].getboolean("refresh image at next login")
refresh_img = always_refresh or refresh_this_time

cleanup_old_imgs = cfg["DEFAULT"].getboolean("cleanup old images")

welcome = cfg["GREETING"]["welcome message"]
display_welcome = cfg["GREETING"].getboolean("display welcome")
display_loading = cfg["GREETING"].getboolean("display loading messages")
display_debug = not cfg["GREETING"].getboolean("show debug output when logging in")


if refresh_this_time:
    # Reset refresh this time back to false
    with open(USER_CONFIG_FILE, 'w') as f:
        refresh_this_time = cfg["IMAGE"]["refresh image at next login"] = "False"
        cfg.write(f)

"""
===============================
"""

def p(*msg, end="\n", _print=True):
    # this is a nightmare...
    if _print:
        print(*msg, end=end, flush=True, file=sys.stderr)


if display_loading:
    p("Logging you into: " + image)
if refresh_img:
    if display_loading:
        p("Refeshing image (might take a little while)...", end="")
    subprocess.run(["podman", "pull", image], capture_output=display_debug)
    if display_loading:
        p(" done")

if cleanup_old_imgs:
    old_img_ids = subprocess.run(["podman", "images", 
                                    "--filter", 
                                    "\"before={}\"".format(image),
                                    "--format",
                                    "{{.ID}}"], 
                                    capture_output=True,
                                    encoding='utf-8')
    if old_img_ids.returncode == 0:
        ids_to_clear = old_img_ids.stdout.split('\n')
        clear_old_img = subprocess.run(["podman", "rmi", 
                                        *ids_to_clear], 
                                        capture_output=True,
                                        encoding='utf-8')



"""
Here we are building a small image on top of whatever image the user has requested.
The image is defined in their ~/.config/imagesh/extras.dockerfile file, but that is
mapped into them under /etc/imagesh
"""
if display_loading:
    p("Checking /etc/imagesh/extra.dockerfile for any image customisations...", end="")
build = subprocess.run(["podman", 
                    "build", 
                    "-f", "extras.dockerfile",
                    "--build-arg=USER={}".format(USER),
                    "--build-arg=UID={}".format(UID),
                    "--build-arg=USER_BASE_IMG={}".format(image),
                    "-t", "user_img",
                    USER_CONFIG_DIR],
                    capture_output=display_debug,
                    encoding='utf-8')
if display_loading:
    p(" done")
if build.returncode != 0:
    p("###############################################################")
    p("An error occured processing your /etc/imagesh/extras.dockerfile")
    if not display_debug:
        p("Here is the log:")
        p(build.stderr)
    p("###############################################################")

if display_welcome:
    p(welcome)

UID_MAX=65536
GID_MAX=65536
UID_HIGHER_START=UID+1
UID_HIGHER_COUNT=UID_MAX-UID 
GID_HIGHER_START=GID+1
GID_HIGHER_COUNT=GID_MAX-GID 

subprocess.run(
        ["podman", "run",
            "-it",
            "--hostname", "build-container",
            "--privileged",  # need this so the user can edit /etc/imagesh
            "--rm",
            "--dns", "10.13.0.9", "--dns", "10.13.0.8",
            "-u", "{UID}:{GID}".format(UID=UID, GID=GID),
            "--uidmap", "{UID}:0:1".format(UID=UID),
            "--uidmap", "0:1:{UID}".format(UID=UID),
            "--uidmap", "{UID_HIGHER_START}:{UID_HIGHER_START}:{UID_HIGHER_COUNT}".format(UID_HIGHER_START=UID_HIGHER_START, UID_HIGHER_COUNT=UID_HIGHER_COUNT),
            "--gidmap", "{GID}:0:1".format(GID=GID),
            "--gidmap", "0:1:{GID}".format(GID=GID),
            "--gidmap", "{GID_HIGHER_START}:{GID_HIGHER_START}:{GID_HIGHER_COUNT}".format(GID_HIGHER_START=GID_HIGHER_START, GID_HIGHER_COUNT=GID_HIGHER_COUNT),
            "--ulimit", "nofile=256:512",  # there is talk this speeds things like 'apt update' up, but not sure...
            "-w", "{}".format(USER_HOME_DIR),
            "-v", "{home}/nfshome:{home}".format(home=USER_HOME_DIR),
            "-v", "{}:/etc/imagesh".format(USER_CONFIG_DIR),
            "user_img",
            "bash",
            ], capture_output=False)

